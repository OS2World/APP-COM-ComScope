PWB-GENERATED FILE: DO NOT MODIFY
[shared-]
	mark=cvp "P:\COMI\RESPONSE.C" 135 1 'E ALL "RESPONSE.C"!.135
	mark=cvp "P:\COMI\RESPONSE.C" 178 1 'E ALL "RESPONSE.C"!.178
	version=2
	project="P:\extra\FONTS.MAK"
	buildmode=2
[edit-]
	srch=info
	fSrchRe=0
	rpl=wIndex
	src=iIndex
	fRplRe=26880
[pwb]
	screen=60 80
	winstyle=7
	wnd=C 2 1 42 80
	wnd=W 43 1 59 80
[environ]
	INCLUDE=w:\TOOLKIT30\SOM\INCLUDE;w:\TOOLKIT30\H;.;w:\TOOLKIT30\INC;
	LIB=w:\TOOLKIT30\LIB;w:\TOOLKIT30\SOM\LIB;
	HELPFILES=
[build]
    build: macro DEBUG "1"
    build: macro PWBRMAKE "pwbrmake"
    build: macro NMAKEBSC1 "set"
    build: macro NMAKEBSC2 "nmake"
    build: macro CC "cl"
    build: macro CFLAGS_G "/BATCH"
    build: macro CFLAGS_D "/Gi$(PROJ).mdt /Zi /Od"
    build: macro CFLAGS_R "/Ot"
    build: macro ASM "ml"
    build: macro AFLAGS_G "/Cx /W2 /WX"
    build: macro AFLAGS_D "/Zi"
    build: macro AFLAGS_R "/nologo"
    build: macro MAPFILE_D "NUL"
    build: macro MAPFILE_R "NUL"
    build: macro LFLAGS_G "/NOI /BATCH"
    build: macro LFLAGS_D "/CO /FAR /PACKC /PACKD /PMTYPE:VIO"
    build: macro LFLAGS_R "/EXE /FAR /PACKC /PACKD /PMTYPE:VIO"
    build: macro LINKER "link"
    build: macro ILINK "ilink"
    build: macro LRF "echo > NUL"
    build: all $(PROJ).exe
    build: target $(PROJ).bsc pwbrmake
    build: target $(PROJ).exe lrf_exe link_exe
    build: inference .c.sbr cc_c_sbr
    build: inference .asm.sbr asm_asm_sbr
    build: inference .c.obj cc_c_obj
    build: inference .asm.obj asm_asm_obj
    build: inference .h.inc h2inc_h_inc
    build: command pwbrmake "$(PWBRMAKE) @<<\n$(BRFLAGS) $(SBRS)\n<<"
    build: command nmakebsc1 "$(NMAKEBSC1) MAKEFLAGS="
    build: command nmakebsc2 "$(NMAKEBSC2) $(NMFLAGS) -f $(PROJFILE) $(PROJ).bsc"
    build: release command cc_c_sbr "$(CC) /Zs $(CFLAGS_G) $(CFLAGS_R) /FR$@ $<"
    build: debug command cc_c_sbr "$(CC) /Zs $(CFLAGS_G) $(CFLAGS_D) /FR$@ $<"
    build: release command asm_asm_sbr "$(ASM) /Zs $(AFLAGS_G) $(AFLAGS_R) /FR$@ $<"
    build: debug command asm_asm_sbr "$(ASM) /Zs $(AFLAGS_G) $(AFLAGS_D) /FR$@ $<"
    build: release command cc_c_obj "$(CC) /c $(CFLAGS_G) $(CFLAGS_R) /Fo$@ $<"
    build: debug command cc_c_obj "$(CC) /c $(CFLAGS_G) $(CFLAGS_D) /Fo$@ $<"
    build: release command asm_asm_obj "$(ASM) /c $(AFLAGS_G) $(AFLAGS_R) /Fo$@ $<"
    build: debug command asm_asm_obj "$(ASM) /c $(AFLAGS_G) $(AFLAGS_D) /Fo$@ $<"
    build: release command h2inc_h_inc "$(H2INC) /c $(CFLAGS_G) $(CFLAGS_R) $<"
    build: debug command h2inc_h_inc "$(H2INC) /c $(CFLAGS_G) $(CFLAGS_D) $<"
    build: release command lrf_exe "$(LRF) @<<$(PROJ).lrf\n$(RT_OBJS: = +^\n) $(OBJS: = +^\n)\n$@\n$(MAPFILE_R)\n$(LLIBS_G: = +^\n) +\n$(LLIBS_R: = +^\n) +\n$(LIBS: = +^\n)\n$(DEF_FILE) $(LFLAGS_G) $(LFLAGS_R);\n<<"
    build: debug command lrf_exe "$(LRF) @<<$(PROJ).lrf\n$(RT_OBJS: = +^\n) $(OBJS: = +^\n)\n$@\n$(MAPFILE_D)\n$(LLIBS_G: = +^\n) +\n$(LLIBS_D: = +^\n) +\n$(LIBS: = +^\n)\n$(DEF_FILE) $(LFLAGS_G) $(LFLAGS_D);\n<<"
    build: command link_exe "$(LINKER) @$(PROJ).lrf"
    build: command run "$(PROJ).exe $(RUNFLAGS)"
    build: command debug "CVP $(CVFLAGS) $(PROJ).exe $(RUNFLAGS)"
    build: include dependencies
    build: include no system
    build: include .c "^[ \t]*#[ \t]*include[ \t]*\"[ \t]*\\(\\:p\\)[ \t]*\"" case
    build: include .c "^[ \t]*#[ \t]*include[ \t]*<[ \t]*\\(\\:p\\)[ \t]*>" case system
    build: include .h "^[ \t]*#[ \t]*include[ \t]*\"[ \t]*\\(\\:p\\)[ \t]*\"" case
    build: include .h "^[ \t]*#[ \t]*include[ \t]*<[ \t]*\\(\\:p\\)[ \t]*>" case system
    build: include .asm "^[ \t]*include[ \t]+\\([^ \t]+\\)"
    build: include .inc "^[ \t]*include[ \t]+\\([^ \t]+\\)"
    build: include .rc "^[ \t]*rcinclude[ \t]+\\([^ \t]+\\)"
    build: include .rc "^[ \t]*#[ \t]*include[ \t]*\"[ \t]*\\(\\:p\\)[ \t]*\""
    build: include .rc "^[ \t]*#[ \t]*include[ \t]*<[ \t]*\\(\\:p\\)[ \t]*>" system
    build: include .asm "^[ \t]*include[ \t]+)" system
    build: include .asm "^[ \t]*include[ \t]+([^ \t]+)"
    build: include .asm "^[ \t]*include[ \t]+i:masminclude\\([^ \t]+\\)" system
    build: include .asm "^[ \t]*INCLUDE[ \t]+\\([^ \t]+\\)" case
    build: include .inc "^[ \t]*INCLUDE[ \t]+\\([^ \t]+\\)" case
    build: message "^SYS[0-9][0-9][0-9][0-9]:\\:b"
    build: message "^NET[0-9][0-9][0-9][0-9]:\\:b"
    build: message "^\\(\\{\\:p\\!<[^>]*>\\}\\) \\([0-9]+\\) \\([0-9]+\\)[ ]*:" file line col
    build: message "^\\(\\:p\\):\\([0-9]+\\):" file line
    build: message "^[^(]+(\\(\\:p\\)) : error L[0-9]+[ ]*: '_*\\([^']+\\)' : unresolved external" file token
    build: message "^[^(]+(\\(\\:p\\)) : [^L]+L[124]" file
    build: message "^LINK [^L]+L[124]"
    build: message "^ILINK : [^L]+L[124]"
    build: message "^\\(\\:p\\)(\\(\\:z\\))[ ]*: [^U]+U[124]" file line
    build: message "^NMAKE : [^U]+U[124]"
    build: message "^\\:p : [^U]+U[124]\\:d\\:d\\:d"
    build: message "^\\(\\:p\\)(\\(\\:z\\)) : [^C]+C[124]" file line
    build: message "^[^C]+C[124][0-9]+: "
    build: message "^[^D]+D[124][0-9]+ : "
    build: message "^\\(\\:p\\)(\\([0-9]+\\))[ \t]*:[ \t]*[^A]+A[12456]" file line
    build: message "^\\(\\:p\\)(\\(\\:z\\)) : [^H]+HI[124]" file line
    build: message "^[^H]+HI[124][0-9]+: "
    build: message "^pwbrmake: [^U]+U[124]"
    build: message "^BIND : [^U]+U[124]"
    build: message "^\\(\\:p\\)(\\(\\:z\\)) RC:" file line
    build: message "^RC: error"
    build: language None

[debug-]
	target="p:\comi\m16_bit\m16_bit.exe"
[cvp]
	wndstate=0 1 1 2 0 1 0 0 0 1 254
	tilestate=1 42 0 80 0 0 0 67 0 8 0 30 0 0 37 0 12 254
	command=use auto
	command=n16
	command=s1
	command=oc-
	command=of-
