/*  header file for x-modem transfer for OS2 */

#ifndef  DEF_ASYNCH_D          /* Avoid duplicate definition   */

#define DT_NOT_INIT       256         /* Transmission return codes    */
#define RECEIVE_ERROR     257
#define TRANS_ERROR       258
#define PACK_RCV_ERROR    259
#define EOT_ENCOUNTERED   260
#define ERP_RD_NUMBER     261
#define ERP_BAD_PACKET_NO 262
#define ERP_RD_STRING     263
#define ERP_RD_ERRDET     264
#define ERP_ERRDET_UNEQ   265
#define NO_MODEM_ERROR    266

#define FILE_OPEN_ERR     300         /* Errors generated by SFILE_DT */
#define FILE_READ_ERR     301         /* and RFILE_DT           */
#define INIT_NAK_ERR      302
#define FINAL_ACK_ERR     303
#define FILE_WRITE_ERR    304
#define SOH_EOT_ERR       305
#define DATA_BITS_ERR     306
#define FLOW_CONTROL_ERR  307

int wtch_dt(THREAD *pstThd,char *pcheck,char *pchar);
int term_dt(THREAD *pstThd);
int erdet_dt(THREAD *pstThd,char *ppacket,char *pcode);
int start_dt(THREAD *pstThd,char synch_ch,char *pch);
int spack_dt(THREAD *pstThd,char *ppacket,int packet_no);
int sfile_dt(THREAD *pstThd,int *pPacketCount);
int rpack_dt(THREAD *pstThd,char *ppacket,int packet_no);
int rfile_dt(THREAD *pstThd,int *pPacketCount);
void parm_dt(THREAD *pstThd);
WORD erdet_db(THREAD *pstThd,char *ppacket);
void crc_calc(WORD data);
int modem_link_check(HFILE hCom);
void mk_crctable(WORD *crctable);
WORD crchware(WORD,WORD,WORD);


#define  DEF_ASYNCH_D 1        /* Prevent a second reading of  */
#endif               /* these definitions.         */
