Microsoft (R) Macro Assembler Version 6.00     		    08/24/02 23:27:22
OS/tools Multi-Port Device Driver			     Page 1 - 1


				;************************************************************************
				;
				; $Revision:   1.7  $
				;
				; $Log:   P:/archive/comi/DataSegment.asv  $
				;
				;     Rev 1.7   28 Mar 1996 00:19:56   EMMETT
				;  Added resource manager.  Began work on VDD support.
				;
				;     Rev 1.6   18 Feb 1996 14:17:48   EMMETT
				;  Added many features.  Notably:
				;  Tracing application DosDevIOCtl function calls and packets.
				;  Support for 16650 and 16750 UARTs.
				;  Streamlined interrupt routine.
				;
				;     Rev 1.5   25 Apr 1995 22:16:22   EMMETT
				;  Added Support for DigiBoard PC/16.  Changed interrupt Routine for better adapter independence.
				;  Changed interrupt routine to allow user to select interrupting device selection algorithim.  Fixed
				;  ABIOS interaction for better "non.INI" initialization in MCA machines.  Fixed various initialization
				;  message strings.  COMscope and receive buffer are now allocated from system memory, allowing
				;  a 32k (word) COMscope buffer and a 64k (byte) receive buffer.
				;
				;     Rev 1.4   03 Dec 1994 14:42:04   EMMETT
				;  Changed segment names to "C" standard.  Added various variable for initialization.
				;
				;     Rev 1.3   22 Jul 1994 09:11:28   EMMETT
				;  Moved all "INCL_" lines for OS2.INC into COMDD.INC.
				;
				;     Rev 1.2   28 Jun 1994 09:06:06   EMMETT
				;  Removed ".VER" includes and placed common version string.
				;
				;     Rev 1.1   11 Jun 1994 10:37:52   EMMETT
				;  Changed all references to "Mirror" to "COMscope".
				;
				;     Rev 1.0   07 Jun 1994 00:18:58   EMMETT
				;  Added support for DigiBoard.
				;  Added initialization support for OEM specific loads.
				;  Fixed bug in StartWriteStream and ProcessModemSignals that caused handshaking problems.
				;  Fixed hardware tests to set baud rate before testing interrupts.
				;  Fixed hardware tests off switch to work only for retail version.
				;
				;************************************************************************

				TITLE OS/tools Multi-Port Device Driver
				SUBTITLE Data Definitions
				PAGE ,132
				;*
				;* FILE: DATA.ASM
				;*
				;* COPYRIGHT: (c) OS/tools Incorporated 1988-94.  All rights reserved.
				;*
				;*
				;*******************************************************************************

				  IFNDEF x16_BIT
				.386P
				  ELSE
				  ENDIF
				.NOLISTMACRO                   ;suppress macro expansion in listing

				.XLIST                  ;suppress listing of INCLUDE files
				.LIST

 = "OS$tools"			HeaderDeviceName EQU <"OS$tools">

 0000				RES_DATA SEGMENT
				        ASSUME DS:RDGROUP, SS:nothing, ES:nothing

				    ORG 0000

 0000 = 0000			START_OF_DATA   EQU   $

 0000				__stAuxHeader LABEL BYTE
 0000 001E R			ComAux            WORD   OFFSET xComAux
 0002 ---- R			ComAuxSeg         WORD   SEG xComAux
				  IFNDEF x16_BIT
 0004 D940			DevAttributes     WORD   DEV_ATT_COMI_AUX
				  ELSE
				  ENDIF
 0006 0000 E			StrategyOffset    WORD   OFFSET AuxStrategy
				;  IFNDEF SHARE
 0008 0000 E			IDCoffset         WORD   OFFSET nDDAttachFunction
				;  ELSE
				;IDCoffset         WORD   0
				;  ENDIF
 000A 4F 53 24 74 6F 6F		DeviceName        BYTE   HeaderDeviceName
       6C 73
 0012  0004 [			ReservedWords     WORD   4 DUP (0)
        0000
       ]
				  IFDEF VDD_support
				  ELSE
 001A  00000000			                  DWORD  0
				  ENDIF
 001E				__stDummyHeader LABEL BYTE
 001E FFFFFFFF			xComAux           DWORD  -1
 0022 9940			xDevAttributes    WORD   DEV_ATT_COMI
 0024 0000 E			xStrategyOffset   WORD   OFFSET xAuxStrategy
 0026 0000 E			xIDCoffset        WORD   OFFSET nDDAttachFunction
 0028 73 6C 6F 6F 74 24		xDeviceName       BYTE   'sloot$SO'
       53 4F
 0030  0004 [			xReservedWords    WORD   4 DUP (0)
        0000
       ]
				  IF DD_level GT 2
				  ENDIF
				  EVEN

 0038 00000000			dwSerialNumber   DWORD 0

 003C				__wMaxPagerCount LABEL WORD
 003C				wMaxPagerCount LABEL WORD
				  IFDEF SHARE
				  ELSE
 003C  0001			                     WORD 1
				  ENDIF

 003E				__wMaxDeviceCount LABEL WORD
 003E				wMaxDeviceCount LABEL WORD

				  IFDEF SHARE
				  ELSE
 003E  0000			                      WORD 0
				  ENDIF

				  IFDEF x16_BIT
				  ENDIF

 0040				__byAdapterType LABEL BYTE
 0040 00			byAdapterType BYTE HDWTYPE_NONE

 0041				__byOEMtype LABEL BYTE
				; these will only be defined when OEM is defined
				  IFDEF DigiBoard
				  ELSE
				; default is not OEM driver
 0041 00			byOEMtype      BYTE 0
				  ENDIF
				  EVEN
				;------------------------- copy protection key ---------------------

				  IFDEF COPY_PROTECT
				  ENDIF

				;--------------------- variables used at task time -----------------

				  IFNDEF x16_BIT
				; IDC variables

 0042 2641			wIDCsignature    WORD SIGNATURE
 0044  0010 [			wIDCbuffer       WORD 16 DUP (0)
        0000
       ]
 0064 0000			wPagerOpenCount  WORD 0

				; Set up IDC access in case this is the first load.
				; This is so that all calls to global (IDC) functions are the same
				; even for the first load, which will not need to use the IDC
				; interface to access the global functions

 0066				IDCaccess       LABEL WORD
 0066 00000000			IDCaccessRM     DWORD 0
 006A 0000			IDCaccessRDS    WORD  0
 006C				IDCaccessPM     LABEL DWORD
 006C 0000 E			IDCaccessPMoff  WORD  OFFSET nDDAttachFunction
 006E ---- E			IDCaccessPMseg  WORD  SEG nDDAttachFunction
 0070 ---- R			IDCaccessPDS    WORD  RDGROUP

 0072  0020 [			IDCdata         WORD  32 DUP(0)
        0000
       ]
				  ENDIF
				; other

 00B2 00000000			device_hlp      DWORD ?

 00B6 0020			wClockRate      WORD DEFAULT_CLOCK_RATE
 00B8 0040			wClockRate2     WORD DEFAULT_CLOCK_RATE * 2

 00BA 0000			wLastEndOfData  WORD 0
 00BC 0000			wLastFunctionCall WORD 0
 00BE 0000			wCurrentTarget WORD 0

 00C0				__wSystemDebug LABEL WORD
 00C0 0000			wSystemDebug     WORD 0
 00C2				__wMiscControl LABEL WORD
 00C2 0000			wMiscControl      WORD 0

				  IFDEF DEMO
 00C4 03E8			wWriteCountStart  WORD EVALUATION_WRITES
 00C6 03E8			wWriteCount       WORD EVALUATION_WRITES
				  ENDIF

 00C8 0000			wIntRegistered  WORD 0
 00CA 0000			wDeviceCount    WORD 0

 00CC 0000			wCOMiLoadNumber WORD 0

 00CE 0000			wTimerAllocCount WORD 0

 00D0				__wCOMscopeStrategy LABEL WORD
 00D0 0000			wCOMscopeStrategy WORD 0

 00D2 0000			wMaskTimerCount WORD 0

 00D4  0010 [			abyInterruptCount BYTE 16 DUP(0)
        00
       ]

 00E4 00			byLastModemOut BYTE 0

 00E5 00			bOpenTrigger  BYTE FALSE
 00E6 00			bWriteTrigger BYTE FALSE
 00E7 00			bReadTrigger BYTE FALSE

 00E8				__abyPath LABEL BYTE
 00E8  0104 [			abyPath         BYTE CCHMAXPATH DUP(0)
        00
       ]
				  EVEN

				  IFDEF VDD_support
				  ENDIF

 01EC 00000000			ulTriggersSinceReboot DWORD 0

				 IFDEF OEM
				 ENDIF

 01F0				__wIntIDregister LABEL WORD
 01F0 0000			wIntIDregister WORD 0

 01F2				__wOEMjumpEntry LABEL WORD
 01F2 0000			wOEMjumpEntry WORD 0

 01F4				__wOEMjumpExit LABEL WORD
 01F4 0000			wOEMjumpExit WORD 0

 01F6				__wOEMjumpTest LABEL WORD
 01F6 0000			wOEMjumpTest   WORD 0

 01F8				__bSharedInterrupts LABEL WORD
 01F8 0001			bSharedInterrupts WORD TRUE

 01FA				__wPCIvendor LABEL WORD
 01FA 0000			wPCIvendor WORD 0
 01FC				__wPCIdevice LABEL WORD
 01FC 0000			wPCIdevice WORD 0

 01FE FFFF			wLastDeviceParmsOffset WORD 0ffffh

 0200 00			byIntStatusMask BYTE 0
				  EVEN

 0202				__wBusType LABEL WORD
 0202 0000			wBusType        WORD 0

 0204 0000			bNoOUT2change WORD FALSE

 0206 0000			wInterruptsUsed WORD 0

 0208 00000000			dwInputData_Return DWORD 0

 020C  0008 [			wDeviceIntOffsetTable WORD MAX_DEVICE DUP(0) ;stores device int params offset
        0000
       ]

				  IFDEF VDD_support
				  ENDIF

 021C  0008 [			wDeviceOffsetTable WORD MAX_DEVICE DUP(0) ;stores device params offset
        0000
       ]

 022C				__wEndOfData LABEL WORD
 022C 0000 R			wEndOfData   WORD OFFSET $

 022E				__stDeviceParms LABEL s_stDeviceParms
 022E  0008 [			stDeviceParms s_stDeviceParms MAX_DEVICE DUP(<>)
        55AA 0000 0000
        0000 0000 0000
        0100 00FF
        00001000 00000FFF
        00002000 00001FFE
        1770 1770 000C
        00002580 06 06 00
        00 D2 00 00 11 13
        00 0800 0020 0003
        0000 0000 00 FF
        1770 1770 11 13
        00 00 0000 0000
        0000 0000 0000
        0050 0000 0000
        0000 ---- R ---- R
        0000 0000 0000
        0000 0000
        00000000 00000000
        00000000 00000000
        0001 0001 0000
        0000 00000000
        00000000 00000000
        00000000 00000000
        00000000 0000
        0000 0000 00 00
        00 00 00 00 00 00
        00 00 00000000
        00000000 0000
        00000000 0000
        00000000 FFFFFFFF
        9940 0000 0000 43
        4F 4D 20 20 20 20
        20 ---- R ---- R
        0000 0000
        FFFFFFFF 9940
        0000 0000 43 4F
        4D 20 20 20 20 20
        ---- R ---- R
        0000 0000
       ]

 09AE				END_OF_KEEP_DATA LABEL BYTE

 09AE 0000			wInitTimerCount     WORD 0

				  IFNDEF NO_4x_CLOCK_SUPPORT
 09B0 00000000			dwTimerCounter  DWORD 0
				  ENDIF

 09B4 4F 53 24 74 6F 6F		IDCdeviceName      BYTE HeaderDeviceName,0
       6C 73 00

 09BD 0020 0000 0000 0001	stABIOSrequestBlock s_stABIOSrequestBlock {}
       0000 0000 FFFF
       0000 00 00 0000
       0000 0000 0000 00
       00 0000 0000
       0010 [
        00
       ] 00

 09EE				__stAttachDD LABEL s_stAttachDDentry
 09EE 00000000 0000		stAttachDD s_stAttachDDentry {}
       00000000 0000

 09FA				__szName LABEL BYTE
 09FA  000A [			szName BYTE 10 DUP(0)
        00
       ]

 0A04 000E 0001 0000 0008	stStackUsage s_stStackUsage <>
       0008 0000 0002

				;dwRunTimeEndOfData    DWORD __wEndOfData

				        ORG 0ffffh

 FFFF = F651			BUF_DATA_AVAILABLE EQU $ - END_OF_KEEP_DATA

 FFFF				RES_DATA ENDS

 0000				_DATA SEGMENT
				;--------------------- variables used only at initialization time -----------------

 0000 4F 45 4D 48 4C 50		_OEMHLPname      BYTE      "OEMHLP$ ",0    ; OEMHLP$ name
       24 20 00
 0009 0000			_OEMHLPhandle    WORD      0               ; handle for file access
 000B 0000			_Action          WORD      0               ; DOSOPEN parameter

 000D 00 00 00 00 00		_stPCIdata_BIOSinfo s_stPCIdata_BIOSinfo  <>
 0012 00 00000000		_stPCIdata_Config s_stPCIdata_Config  <>
 0017 00 00 00			_stPCIdata_Device s_stPCIdata_Device  <>

 001A 00 00000000 00		_stPCIparam_ClassCode s_stPCIparam_ClassCode  <>
 0020 00 00 00 00 00		_stPCIparam_Config s_stPCIparam_Config  <>
       00000000
 0029 00 0000 0000 00		_stPCIparam_Device s_stPCIparam_Device  <>

 002F FFFF			_wLoadNumber            WORD NO_INI_FILE
 0031 0000			_wLoadCount             WORD 0
 0033 0000			_wSelectorCount         WORD 0
 0035 0000			_wLoadFlags             WORD 0
 0037 0001			_bIsTheFirst            WORD TRUE
 0039 0001			_bABIOSpresent          WORD TRUE
 003B 00			_byInitIntORmask        BYTE 0
 003C FF			_byInitIntANDmask       BYTE 0ffh
 003D 00			_byNextPCIslot          BYTE 0
 003E 00			_xBaudMultiplier        BYTE 0

 003F 0000			_bPnPcapable            WORD FALSE

 0041 0001			_bPCI_BIOSpresent       WORD TRUE
 0043 00000000			_dwPCIvector            DWORD 0

 0047 0000F651			_ulAvailableBufferSpace DWORD BUF_DATA_AVAILABLE
 004B 00000000			_ulRequiredBufferSpace DWORD ZERO
 004F 00000000			_ulWriteBufferSpace DWORD ZERO
 0053 0001			_bUseDDdataSegment WORD TRUE


				  IFDEF VDD_support
				  ENDIF

 0055 0000			_wInitDebugFlags WORD 0

 0057 0000			_bTimerAvailable WORD FALSE

 0059 0000			_bDisableRM WORD FALSE

 005B 0000			_wDriverLoadCount WORD 0
 005D  0009 [			_stRMparms s_stRMparms MAX_DEVICE + 1 DUP({})
        00000000 00000000
        00000000
       ]

				  IFNDEF x16_BIT
 00C9  0010 [			_awGDTselectors  WORD (MAX_DEVICE * 2) DUP(0)
        0000
       ]

 00E9 00000000			_Ring0Vector      DWORD 0
				  ENDIF
 00ED 0000			_wLID            WORD 0
 00EF  0008 [			_LIDtable       s_stLIDtable 8 dup({})
        0000 0000 0000
        0000 0000 0000 00
        00 0000
       ]
 016F  0008 [			_astInstallParms s_stInstallParms MAX_DEVICE DUP({})
        0000
       ]


 017F 0000			_wInstallTryCount WORD 0
 0181 00			_byIntIDregisterPreset  BYTE 0

				; these will only be defined when OEM is defined
 0182				_byLoadAdapterType LABEL BYTE
				  IFDEF DigiBoard
				  ELSE
				; default is no hardware type
 0182  00			                     BYTE HDWTYPE_NONE
				  ENDIF

 0183  0104 [			_szDefaultPath   BYTE CCHMAXPATH dup(0)
        00
       ]

 0287  0008 [			_abyCOMnumbers   BYTE MAX_DEVICE DUP(0)
        00
       ]
 028F 0000			_bPrimaryInit     WORD FALSE
 0291 0000			_bDebugDelay      WORD FALSE

 0293  0008 [			_stConfigParms s_stConfigParms MAX_DEVICE DUP({})
        0000 0000 0000
        0000 0000 0000
        0000 0000 0000
        0000 0000 0000
        00000000 0000 00
        00 00 00 00 00 00
        00 0000 0000
       ]
 03E3 0001			_bSeparateIDreg WORD TRUE

 03E5 0000			_iIntIDindex     WORD 0
 03E7 0000			_StackPointer     WORD 0
 03E9 0000			_iDataIndex      WORD 0
 03EB 0000			_bIntIDavailable WORD 0
 03ED 0000			_bContinueParse  WORD 0
 03EF 0000			_wCurrentDevice   WORD 0
 03F1 0000			_wBaseDevice      WORD 0

 03F3 0014			_wDelayCount     WORD DEFAULT_INIT_DELAY
 03F5 0000			_bOUT1activate  WORD FALSE

 03F7 0000			_bBadLoad            WORD FALSE

 03F9 0000			_PreviousLID         WORD 0
 03FB 00			_byPortNumber        BYTE 0
 03FC 0000			_wBufferLength       WORD 0
 03FE  000A [			_abyNumber           BYTE 10 DUP(0)
        00
       ]
 0408  0006 [			_abyTemp             BYTE 6 DUP(0)
        00
       ]
 040E 0000			_bWaitingKey         WORD FALSE
 0410 0000			_bValidIntIDreg      WORD FALSE
 0412 0000			_bValidInterrupt     WORD FALSE
 0414 0000			_wInitTestPort       WORD 0

 0416 0000			_bUsesSixteenAddrLines WORD FALSE

 0418 0000			_bVerbose           WORD FALSE
 041A 0000			_bDelay             WORD FALSE
 041C 0000			_bPrintLocation     WORD FALSE

 041E 0000			_wPCIcount          WORD 0

 0420				_astMCAportTable LABEL s_stMCAportDef
 0420  03F8			        WORD 03f8h                ;serial 1 = COM1
 0422  04			        BYTE 04
 0423  02F8			        WORD 02f8h                ;serial 2 = COM2
 0425  03			        BYTE 03
 0426  3220			        WORD 3220h                ;serial 3 = COM3
 0428  03			        BYTE 03
 0429  3228			        WORD 3228h                ;serial 4 = COM4
 042B  03			        BYTE 03
 042C  4220			        WORD 4220h                ;serial 5 = COM5
 042E  03			        BYTE 03
 042F  4228			        WORD 4228h                ;serial 6 = COM6
 0431  03			        BYTE 03
 0432  5220			        WORD 5220h                ;serial 7 = COM7
 0434  03			        BYTE 03
 0435  5228			        WORD 5228h                ;serial 8 = COM8
 0437  03			        BYTE 03
 0438  0000			        WORD 0000
 043A  00			        BYTE 00

 043B				_PCItable LABEL WORD
				  IFDEF ConnecTech
				  ENDIF
 043B  0000			        WORD    0000

 043D				_SealevelPCIadapterTable LABEL WORD
 043D  7801			       WORD PCI_DEVICE_SL_7801
 043F  7201			       WORD PCI_DEVICE_SL_7201
 0441  7202			       WORD PCI_DEVICE_SL_7202
 0443  7401			       WORD PCI_DEVICE_SL_7401
 0445  7402			       WORD PCI_DEVICE_SL_7402
 0447  7404			       WORD PCI_DEVICE_SL_7404
 0449  7101			       WORD PCI_DEVICE_SL_7101
 044B  0000			       WORD 0

 044D				_ConnectechPCIadapterTable LABEL WORD
 044D  0001			       WORD PCI_DEVICE_BH_V960
 044F  0002			       WORD PCI_DEVICE_BH_V961
 0451  0004			       WORD PCI_DEVICE_BH_V962
 0453  0010			       WORD PCI_DEVICE_BH_V292
 0455  0000			       WORD 0

 0457				_GlobetekPCIadapterTable LABEL WORD
 0457  1002			       WORD PCI_DEVICE_GT_1002
 0459  1004			       WORD PCI_DEVICE_GT_1004
 045B  1008			       WORD PCI_DEVICE_GT_1008
 045D  0000			       WORD 0

 045F				_MoxaPCIadapterTable LABEL WORD
 045F  1040			       WORD PCI_DEVICE_MX_C104H
 0461  1680			       WORD PCI_DEVICE_MX_C168H
 0463  0000			       WORD 0

 0465				_ClassCodeTable LABEL DWORD
 0465  00070000			       DWORD PCI_CLASSCODE_GENERIC_SERIAL
 0469  00070001			       DWORD PCI_CLASSCODE_SERIAL_16450  
 046D  00070002			       DWORD PCI_CLASSCODE_SERIAL_16550  
 0471  00070003			       DWORD PCI_CLASSCODE_SERIAL_16650  
 0475  00070004			       DWORD PCI_CLASSCODE_SERIAL_16750  
 0479  00070005			       DWORD PCI_CLASSCODE_SERIAL_16850  
 047D  00070006			       DWORD PCI_CLASSCODE_SERIAL_16950  
 0481  00070080			       DWORD PCI_CLASSCODE_MOXA 
 0485  00070200			       DWORD PCI_CLASSCODE_MULTIPORT     
 0489  00070300			       DWORD PCI_CLASSCODE_GENERIC_MODEM 
 048D  00070301			       DWORD PCI_CLASSCODE_16450_MODEM   
 0491  00070302			       DWORD PCI_CLASSCODE_16550_MODEM   
 0495  00070303			       DWORD PCI_CLASSCODE_16650_MODEM   
 0499  00070304			       DWORD PCI_CLASSCODE_16750_MODEM   
 049D  00070305			       DWORD PCI_CLASSCODE_16850_MODEM   
 04A1  00070306			       DWORD PCI_CLASSCODE_16950_MODEM   
 04A5  00078000			       DWORD PCI_CLASSCODE_OTHER         
 04A9  00000000			       DWORD 0

 04AD  0002 [			_stPCIadapterTable s_stPCIadapter (MAX_PCI_ADAPTERS + 1) dup({0})
        00 00 00 00 0000
        0000 00000000
        0000 0000 0000
        0000 0000 0000
       ]
 04DD  0002 [			_stPCIadapterHold s_stPCIadapter (MAX_PCI_ADAPTERS + 1) dup({0})
        00 00 00 00 0000
        0000 00000000
        0000 0000 0000
        0000 0000 0000
       ]

 050D				_ADFtable LABEL WORD
				  IFDEF Globetek
				  ENDIF
				  IFDEF Quatech
				  ENDIF
				  IFDEF Neotech
				  ENDIF
				  IFDEF Sealevel
				  ENDIF
 050D  0000			        WORD 0000

				  IFDEF COPY_PROTECT
				  ENDIF

 050F 0000			_wDeviceCount WORD 0
 0511 0000			_wPCIadapterCount WORD 0

 0513  0100 [			_abyString       BYTE 256 DUP(0)
        00
       ]

 0613 0000			_bWaitForCR      WORD FALSE

				  IFDEF x16_BIT
				  ENDIF

				  IFDEF x16_BIT
				  ELSE
 0615 0D 0A 07 1B 5B 31		_chFailedReadIni        BYTE 0dh,0ah,07h,"[1mFailed to read initialization file.[0m",0dh,0ah,0
       6D 46 61 69 6C 65
       64 20 74 6F 20 72
       65 61 64 20 69 6E
       69 74 69 61 6C 69
       7A 61 74 69 6F 6E
       20 66 69 6C 65 2E
       1B 5B 30 6D 0D 0A
       00
 0646 0D 0A 07 1B 5B 31		_chFailedWriteIni       BYTE 0dh,0ah,07h,"[1mFailed on write to initialization file.[0m",0dh,0ah,0
       6D 46 61 69 6C 65
       64 20 6F 6E 20 77
       72 69 74 65 20 74
       6F 20 69 6E 69 74
       69 61 6C 69 7A 61
       74 69 6F 6E 20 66
       69 6C 65 2E 1B 5B
       30 6D 0D 0A 00
 067B 0D 0A 07 1B 5B 31		_chFailedBadVersion_1   BYTE 0dh,0ah,07h,"[1mVersion of initialization file ",0
       6D 56 65 72 73 69
       6F 6E 20 6F 66 20
       69 6E 69 74 69 61
       6C 69 7A 61 74 69
       6F 6E 20 66 69 6C
       65 20 00
 06A2 0D 0A 64 6F 65 73		_chFailedBadVersion_2   BYTE 0dh,0ah,"does not match COMi version.  Use correct version of COMscope 
       20 6E 6F 74 20 6D	or Install to",0dh,0ah
       61 74 63 68 20 43
       4F 4D 69 20 76 65
       72 73 69 6F 6E 2E
       20 20 55 73 65 20
       63 6F 72 72 65 63
       74 20 76 65 72 73
       69 6F 6E 20 6F 66
       20 43 4F 4D 73 63
       6F 70 65 20 6F 72
       20 49 6E 73 74 61
       6C 6C 20 74 6F 0D
       0A
 06F1  73 65 74 2D 75 70	                        BYTE         "set-up devices and re-start system.[0m",0dh,0ah,0
       20 64 65 76 69 63
       65 73 20 61 6E 64
       20 72 65 2D 73 74
       61 72 74 20 73 79
       73 74 65 6D 2E 1B
       5B 30 6D 0D 0A 00
 071B 0D 0A 07 1B 5B 31		_chFailedIniNotInit_1   BYTE 0dh,0ah,07h,"[1mThe initialization file ",0
       6D 54 68 65 20 69
       6E 69 74 69 61 6C
       69 7A 61 74 69 6F
       6E 20 66 69 6C 65
       20 00
 073B 0D 0A 69 73 20 6E		_chFailedIniNotInit_2   BYTE 0dh,0ah,"is not configured for this COMi load.  Use COMscope or Install
       6F 74 20 63 6F 6E	 to",0dh,0ah
       66 69 67 75 72 65
       64 20 66 6F 72 20
       74 68 69 73 20 43
       4F 4D 69 20 6C 6F
       61 64 2E 20 20 55
       73 65 20 43 4F 4D
       73 63 6F 70 65 20
       6F 72 20 49 6E 73
       74 61 6C 6C 20 74
       6F 0D 0A
 0780  73 65 74 75 70 20	                        BYTE         "setup devices and re-start system.[0m",0dh,0ah,0dh,0ah,0
       64 65 76 69 63 65
       73 20 61 6E 64 20
       72 65 2D 73 74 61
       72 74 20 73 79 73
       74 65 6D 2E 1B 5B
       30 6D 0D 0A 0D 0A
       00
 07AB 0D 0A 07 1B 5B 31		_chFailedIniCorrupt_1   BYTE 0dh,0ah,07h,"[1mInitialization  file ",0
       6D 49 6E 69 74 69
       61 6C 69 7A 61 74
       69 6F 6E 20 20 66
       69 6C 65 20 00
 07C8 0D 0A 69 73 20 6E		_chFailedIniCorrupt_2   BYTE 0dh,0ah,"is not correct format.  Delete file and use COMscope or Instal
       6F 74 20 63 6F 72	l to",0dh,0ah
       72 65 63 74 20 66
       6F 72 6D 61 74 2E
       20 20 44 65 6C 65
       74 65 20 66 69 6C
       65 20 61 6E 64 20
       75 73 65 20 43 4F
       4D 73 63 6F 70 65
       20 6F 72 20 49 6E
       73 74 61 6C 6C 20
       74 6F 0D 0A
 080E  73 65 74 75 70 20	                        BYTE         "setup devices and re-start system.[0m",0dh,0ah,0dh,0ah,0
       64 65 76 69 63 65
       73 20 61 6E 64 20
       72 65 2D 73 74 61
       72 74 20 73 79 73
       74 65 6D 2E 1B 5B
       30 6D 0D 0A 0D 0A
       00
 0839 0D 0A 07 1B 5B 31		_chFailedBadPath        BYTE 0dh,0ah,07h,"[1mBad Path Stored at Initialization[0m",0dh,0ah,0
       6D 42 61 64 20 50
       61 74 68 20 53 74
       6F 72 65 64 20 61
       74 20 49 6E 69 74
       69 61 6C 69 7A 61
       74 69 6F 6E 1B 5B
       30 6D 0D 0A 00

				IFNDEF NO_PCI
 0868 50 43 49 20 61 64		_chPCI_LoadOrder_1      BYTE "PCI adapters are load order dependant.  You must configure PCI adapter
       61 70 74 65 72 73	s",0dh,0ah,0
       20 61 72 65 20 6C
       6F 61 64 20 6F 72
       64 65 72 20 64 65
       70 65 6E 64 61 6E
       74 2E 20 20 59 6F
       75 20 6D 75 73 74
       20 63 6F 6E 66 69
       67 75 72 65 20 50
       43 49 20 61 64 61
       70 74 65 72 73 0D
       0A 00
 08B2 73 74 61 72 74 69		_chPCI_LoadOrder_2      BYTE "starting in load one, with each subsequent PCI adapter in succeeding l
       6E 67 20 69 6E 20	oads.",0dh,0ah,0dh,0ah,0
       6C 6F 61 64 20 6F
       6E 65 2C 20 77 69
       74 68 20 65 61 63
       68 20 73 75 62 73
       65 71 75 65 6E 74
       20 50 43 49 20 61
       64 61 70 74 65 72
       20 69 6E 20 73 75
       63 63 65 65 64 69
       6E 67 20 6C 6F 61
       64 73 2E 0D 0A 0D
       0A 00
 0902 07 1B 5B 31 6D 50		_chPCIBadIRQ            BYTE 07h,"[1mPCI serial adapter IRQ not assigned, check BIOS PCI settings.
       43 49 20 73 65 72	[0m",0dh,0ah,0dh,0ah,0
       69 61 6C 20 61 64
       61 70 74 65 72 20
       49 52 51 20 6E 6F
       74 20 61 73 73 69
       67 6E 65 64 2C 20
       63 68 65 63 6B 20
       42 49 4F 53 20 50
       43 49 20 73 65 74
       74 69 6E 67 73 2E
       1B 5B 30 6D 0D 0A
       0D 0A 00
 094D 07 1B 5B 31 6D 54		_chTooManyPCIadapters   BYTE 07h,"[1mToo many PCI adapters defined for this version of device drive
       6F 6F 20 6D 61 6E	r[0m",0dh,0ah,0dh,0ah,0
       79 20 50 43 49 20
       61 64 61 70 74 65
       72 73 20 64 65 66
       69 6E 65 64 20 66
       6F 72 20 74 68 69
       73 20 76 65 72 73
       69 6F 6E 20 6F 66
       20 64 65 76 69 63
       65 20 64 72 69 76
       65 72 1B 5B 30 6D
       0D 0A 0D 0A 00


				 IFDEF ConnectTech
				ELSE
				  IFDEF Sealevel
				  ELSE
				   IFDEF Sealevel_Retail
				   ELSE
 099A 07 1B 5B 31 6D 4E		_chPCIMissing           BYTE 07h,"[1mNo PCI serial adapter is installed for this COMi load.[0m",0d
       6F 20 50 43 49 20	h,0ah,0dh,0ah,0
       73 65 72 69 61 6C
       20 61 64 61 70 74
       65 72 20 69 73 20
       69 6E 73 74 61 6C
       6C 65 64 20 66 6F
       72 20 74 68 69 73
       20 43 4F 4D 69 20
       6C 6F 61 64 2E 1B
       5B 30 6D 0D 0A 0D
       0A 00
				   ENDIF
				  ENDIF
				 ENDIF
				ELSE
				ENDIF

				  IFDEF OEM
				  ENDIF
				  IFDEF OEM_GA
				  ENDIF

				  IFDEF debug_ini
				  ENDIF

				  ENDIF

 09DE  00C8 [			_szMessage BYTE 200 DUP(0)
        00
       ]
 0AA6  2000 [			_abyFileBuffer BYTE 8192 DUP(0)
        00
       ]

 2AA6 2AA8 R			_wEndOfInitData   WORD END_OF_INIT_DATA
 2AA8 = 2AA8			END_OF_INIT_DATA EQU $

 2AA8				_DATA ENDS

				  IFNDEF x16_BIT
				 IFDEF this_junk
				 ENDIF

 0000				RES_CODE SEGMENT

				    EXTRN AuxStrategy                   :NEAR
				    EXTRN xAuxStrategy                  :NEAR
				  IFNDEF x16_BIT
				    EXTRN nDDAttachFunction             :NEAR
				  ENDIF

 0000				RES_CODE ENDS

				  ENDIF

				 END
